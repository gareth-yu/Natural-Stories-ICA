import matplotlib.pyplot as plt
import numpy as np
import os
import argparse
import nimfa
import pandas as pd
# Import csv file
data = pd.read_csv('fake_data.csv')
data = data.drop(data.columns[0], axis=1)
n_components = 2
# Change data to a numpy
V = data.to_numpy()
V = (V - V.min(0)).T
bdnmf = nimfa.Bd(V, seed="random_c", rank=n_components, max_iter=12, alpha=np.zeros((V.shape[0], n_components)),
beta=np.zeros((n_components, V.shape[1])), theta=.0, k=.0, sigma=1., skip=100, stride=1,
n_w=np.zeros((n_components, 1)), n_h=np.zeros((n_components, 1)), n_run = 1, n_sigma=False)
bdnmf_fit = bdnmf()
import matplotlib.pyplot as plt
import numpy as np
import os
import argparse
import nimfa
import pandas as pd
# Import csv file
data = pd.read_csv('fake_data.csv')
data = data.drop(data.columns[0], axis=1)
n_components = 2
# Change data to a numpy
V = data.to_numpy()
V = (V - V.min(0)).T
bdnmf = nimfa.Bd(V, seed="random_c", rank=n_components, max_iter=12, alpha=np.zeros((V.shape[0], n_components)),
beta=np.zeros((n_components, V.shape[1])), theta=.0, k=.0, sigma=1., skip=100, stride=1,
n_w=np.zeros((n_components, 1)), n_h=np.zeros((n_components, 1)), n_run = 1, n_sigma=False)
bdnmf_fit = bdnmf()
reticulate::repl_python()
setwd("~/")
reticulate::repl_python()
# Compare retrieved components
Components <- read_csv("components.csv")
# Compare retrieved components
Components <- read.csv("components.csv")
Basis <- read.csv("basis.csv", headers = FALSE)
Basis <- read.csv("basis.csv", header = FALSE)
reticulate::repl_python()
py_install(scikit-learn)
library(reticulate)
py_install(scikit-learn)
py_install(sklearn)
py_install("scikit-learn")
reticulate::repl_python()
py_install("utils-NMF")
py_install("utils-nm")
pip install utils
py_install("utils_nmf")
py_install("utils_nmf", pip = TRUE)
py_install("utils-nm", pip = TRUE)
reticulate::repl_python()
utils_nmf
library(reticulate)
library(reticulate)
reticulate::repl_python()
reticulate::py_run_string("!pip install utils_nmf")
reticulate::py_run_string("pip install utils_nmf")
reticulate::py_install("utils_nmf")
system("python -m pip install utils_nmf")
system("/Users/garethyu/Library/r-miniconda-arm64/envs/r-reticulate/bin/pip install utils_nmf")
reticulate::py_install("git+https://github.com/nloyfer/ssNMF/blob/main/utils_nmf.py", method = "pip")
system("/Users/garethyu/Library/r-miniconda-arm64/envs/r-reticulate/bin/pip install git+https://github.com/nloyfer/ssNMF/blob/main/utils_nmf.py")
download.file("https://github.com/nloyfer/ssNMF/raw/main/utils_nmf.py", destfile = "utils_nmf.py")
reticulate::repl_python()
Basis <- read.csv("/Fake Data BNMF/basis.csv", header = FALSE)
Basis <- read.csv("basis.csv", header = FALSE)
Coef <- read.csv("coef.csv", header = FALSE)
Components <- read.csv("components.csv")
Basis <- read.csv("basis.csv", header = FALSE)
Coef <- read.csv("coef.csv", header = FALSE)
Coef <- t(Coef)
Components <- read.csv("components.csv")
Basis <- read.csv("basis.csv", header = FALSE)
Coef <- read.csv("coef.csv", header = FALSE)
View(Basis)
View(Coef)
data = np.load('%sfake_data_ncomp_%d_run%d.npy' % (save_dir, n_components, r_), allow_pickle = True).item()
data = np.load('%sfake_data_ncomp_%d_run%d.npy' % (save_dir, n_components, r_), allow_pickle = True).item()
reticulate::repl_python()
setwd("~/Documents/GitHub/Natural-Stories-ICA/ICA")
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.5), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 2
betaC2 <- 3
covariance_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
library(mvtnorm)
library(reticulate)
setwd("~/Documents/GitHub/Natural-Stories-ICA/ICA")
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.5), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 2
betaC2 <- 3
covariance_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
fake_data <- matrix(0, nrow = numWords, ncol = numPeople)
for (i in seq_len(numPeople)) {
for (j in seq_len(numWords)) {
fake_data[j, i] <- beta0 + multipliers[i, 1]*component1[j] + multipliers[i, 2]*component2[j] + betaInd*individual[i]
}
}
fake_data <- fake_data + error
write.csv(fake_data, "~/Documents/GitHub/Natural-Stories-ICA/ICA/fake_data.csv")
write.csv(multipliers, "~/Documents/GitHub/Natural-Stories-ICA/ICA/multipliers.csv")
write.csv(cbind(component1, component2), "~/Documents/GitHub/Natural-Stories-ICA/ICA/components.csv")
reticulate::repl_python()
consensus <- read.csv("~/Documents/GitHub/Natural-Stories-ICA/ICA/Fake Data BNMF/fake_data_consensus_ncomp_2_nruns50.csv", header = FALSE)
Basis <- read.csv("basis6.csv", header = FALSE)
nn_component1 <- component1 - min(component1)
nn_component2 <- component2 - min(component2)
time_points = 50
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 1]), type = 'l', col = 'darkgreen')
plot(scale(nn_component2[1:time_points]), type = 'l', col = 'blue', ylim = c(-3, 3))
lines(scale(Basis[1:time_points, 2]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component2[1:time_points]), type = 'l', col = 'blue', ylim = c(-3, 3))
lines(scale(consensus[1:time_points, 1]), type = 'l', col = 'darkgreen')
setwd("~/Documents/GitHub/Natural-Stories-ICA/ICA")
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.6), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 2
betaC2 <- 3
covariance_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
fake_data <- matrix(0, nrow = numWords, ncol = numPeople)
for (i in seq_len(numPeople)) {
for (j in seq_len(numWords)) {
fake_data[j, i] <- beta0 + multipliers[i, 1]*component1[j] + multipliers[i, 2]*component2[j] + betaInd*individual[i]
}
}
fake_data <- fake_data + error
write.csv(fake_data, "~/Documents/GitHub/Natural-Stories-ICA/ICA/fake_data.csv")
write.csv(multipliers, "~/Documents/GitHub/Natural-Stories-ICA/ICA/multipliers.csv")
write.csv(cbind(component1, component2), "~/Documents/GitHub/Natural-Stories-ICA/ICA/components.csv")
reticulate::repl_python()
consensus <- read.csv("~/Documents/GitHub/Natural-Stories-ICA/ICA/Fake Data BNMF/fake_data_consensus_ncomp_2_nruns50.csv", header = FALSE)
Basis <- read.csv("basis6.csv", header = FALSE)
nn_component1 <- component1 - min(component1)
nn_component2 <- component2 - min(component2)
time_points = 50
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
setwd("~/Documents/GitHub/Natural-Stories-ICA/ICA")
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.6), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 2
betaC2 <- 3
covariance_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
fake_data <- matrix(0, nrow = numWords, ncol = numPeople)
for (i in seq_len(numPeople)) {
for (j in seq_len(numWords)) {
fake_data[j, i] <- beta0 + multipliers[i, 1]*component1[j] + multipliers[i, 2]*component2[j] + betaInd*individual[i]
}
}
fake_data <- fake_data + error
write.csv(fake_data, "~/Documents/GitHub/Natural-Stories-ICA/ICA/fake_data.csv")
write.csv(multipliers, "~/Documents/GitHub/Natural-Stories-ICA/ICA/multipliers.csv")
write.csv(cbind(component1, component2), "~/Documents/GitHub/Natural-Stories-ICA/ICA/components.csv")
reticulate::repl_python()
consensus <- read.csv("~/Documents/GitHub/Natural-Stories-ICA/ICA/Fake Data BNMF/fake_data_consensus_ncomp_2_nruns50.csv", header = FALSE)
Basis <- read.csv("basis6.csv", header = FALSE)
nn_component1 <- component1 - min(component1)
nn_component2 <- component2 - min(component2)
time_points = 50
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component2[1:time_points]), type = 'l', col = 'blue', ylim = c(-3, 3))
lines(scale(consensus[1:time_points, 1]), type = 'l', col = 'darkgreen')
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.66), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 2
betaC2 <- 3
covariance_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
fake_data <- matrix(0, nrow = numWords, ncol = numPeople)
for (i in seq_len(numPeople)) {
for (j in seq_len(numWords)) {
fake_data[j, i] <- beta0 + multipliers[i, 1]*component1[j] + multipliers[i, 2]*component2[j] + betaInd*individual[i]
}
}
fake_data <- fake_data + error
write.csv(fake_data, "~/Documents/GitHub/Natural-Stories-ICA/ICA/fake_data.csv")
write.csv(multipliers, "~/Documents/GitHub/Natural-Stories-ICA/ICA/multipliers.csv")
write.csv(cbind(component1, component2), "~/Documents/GitHub/Natural-Stories-ICA/ICA/components.csv")
reticulate::repl_python()
consensus <- read.csv("~/Documents/GitHub/Natural-Stories-ICA/ICA/Fake Data BNMF/fake_data_consensus_ncomp_2_nruns50.csv", header = FALSE)
Basis <- read.csv("basis6.csv", header = FALSE)
nn_component1 <- component1 - min(component1)
nn_component2 <- component2 - min(component2)
time_points = 50
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'pink')
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'red')
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component2[1:time_points]), type = 'l', col = 'blue', ylim = c(-3, 3))
lines(scale(data_transformed[1:time_points, 2]), type = 'l', col = 'red')
lines(scale(Basis[1:time_points, 2]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 1]), type = 'l', col = 'darkgreen')
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.8), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 2
betaC2 <- 3
covariance_matrix <- matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
fake_data <- matrix(0, nrow = numWords, ncol = numPeople)
for (i in seq_len(numPeople)) {
for (j in seq_len(numWords)) {
fake_data[j, i] <- beta0 + multipliers[i, 1]*component1[j] + multipliers[i, 2]*component2[j] + betaInd*individual[i]
}
}
fake_data <- fake_data + error
write.csv(fake_data, "~/Documents/GitHub/Natural-Stories-ICA/ICA/fake_data.csv")
write.csv(multipliers, "~/Documents/GitHub/Natural-Stories-ICA/ICA/multipliers.csv")
write.csv(cbind(component1, component2), "~/Documents/GitHub/Natural-Stories-ICA/ICA/components.csv")
reticulate::repl_python()
consensus <- read.csv("~/Documents/GitHub/Natural-Stories-ICA/ICA/Fake Data BNMF/fake_data_consensus_ncomp_2_nruns50.csv", header = FALSE)
Basis <- read.csv("basis6.csv", header = FALSE)
nn_component1 <- component1 - min(component1)
nn_component2 <- component2 - min(component2)
time_points = 50
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'red')
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
lines(scale(Basis[1:time_points, 2]), type = 'l', col = 'red')
plot(scale(nn_component2[1:time_points]), type = 'l', col = 'blue', ylim = c(-3, 3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 1]), type = 'l', col = 'darkgreen')
reticulate::repl_python()
numWords <- 1000
# Compare consensus components
consensus <- read.csv("~/Documents/GitHub/Natural-Stories-ICA/ICA/Fake Data BNMF/fake_data_consensus_ncomp_2_nruns50.csv", header = FALSE)
Basis <- read.csv("basis6.csv", header = FALSE)
nn_component1 <- component1 - min(component1)
nn_component2 <- component2 - min(component2)
time_points = 50
plot(scale(nn_component1[1:time_points]), type = 'l', col = 'blue', ylim = c(-3,3))
lines(scale(Basis[1:time_points, 2]), type = 'l', col = 'red')
lines(scale(consensus[1:time_points, 2]), type = 'l', col = 'darkgreen')
plot(scale(nn_component2[1:time_points]), type = 'l', col = 'blue', ylim = c(-3, 3))
lines(scale(Basis[1:time_points, 1]), type = 'l', col = 'pink')
lines(scale(consensus[1:time_points, 1]), type = 'l', col = 'darkgreen')
View(covariance_matrix)
covariance_matrix <- diag(4)
View(covariance_matrix)
setwd("~/Documents/GitHub/Natural-Stories-ICA/ICA")
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
component3 <- rnorm(numWords, mean = 0, sd = 1)
component4 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.8), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 1
betaC2 <- 2
betaC3 <- 3
betaC4 <- 4
covariance_matrix <- diag(4)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2))
setwd("~/Documents/GitHub/Natural-Stories-ICA/ICA")
set.seed(10)
numWords <- 1000
numPeople <- 100
component1 <- rnorm(numWords, mean = 0, sd = 1)
component2 <- rnorm(numWords, mean = 0, sd = 1)
component3 <- rnorm(numWords, mean = 0, sd = 1)
component4 <- rnorm(numWords, mean = 0, sd = 1)
individual <- rnorm(numPeople, mean = 0, sd = 1)
error <- matrix(rnorm(numWords*numPeople, mean = 0, sd = 0.8), nrow = numWords, ncol = numPeople)
beta0 <- 1
betaInd <- 1
betaC1 <- 1
betaC2 <- 2
betaC3 <- 3
betaC4 <- 4
covariance_matrix <- diag(4)
multipliers <- rmvnorm(numPeople, sigma = covariance_matrix, mean = c(betaC1, betaC2, betaC3, betaC4))
fake_data <- matrix(0, nrow = numWords, ncol = numPeople)
for (i in seq_len(numPeople)) {
for (j in seq_len(numWords)) {
fake_data[j, i] <- beta0 + multipliers[i, 1]*component1[j] + multipliers[i, 2]*component2[j] +
multipliers[i, 3]*component3[j] + multipliers[i, 4]*component4[j] +
betaInd*individual[i]
}
}
fake_data <- fake_data + error
write.csv(fake_data, "~/Documents/GitHub/Natural-Stories-ICA/ICA/fake_data.csv")
write.csv(multipliers, "~/Documents/GitHub/Natural-Stories-ICA/ICA/multipliers.csv")
write.csv(cbind(component1, component2), "~/Documents/GitHub/Natural-Stories-ICA/ICA/components.csv")
reticulate::repl_python()
